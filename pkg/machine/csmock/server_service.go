// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudscale-ch/cloudscale-go-sdk/v5 (interfaces: ServerService)
//
// Generated by this command:
//
//	mockgen -destination=./csmock/server_service.go -package csmock github.com/cloudscale-ch/cloudscale-go-sdk/v5 ServerService
//

// Package csmock is a generated GoMock package.
package csmock

import (
	context "context"
	reflect "reflect"

	cloudscale "github.com/cloudscale-ch/cloudscale-go-sdk/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockServerService is a mock of ServerService interface.
type MockServerService struct {
	ctrl     *gomock.Controller
	recorder *MockServerServiceMockRecorder
	isgomock struct{}
}

// MockServerServiceMockRecorder is the mock recorder for MockServerService.
type MockServerServiceMockRecorder struct {
	mock *MockServerService
}

// NewMockServerService creates a new mock instance.
func NewMockServerService(ctrl *gomock.Controller) *MockServerService {
	mock := &MockServerService{ctrl: ctrl}
	mock.recorder = &MockServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerService) EXPECT() *MockServerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServerService) Create(ctx context.Context, createRequest *cloudscale.ServerRequest) (*cloudscale.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, createRequest)
	ret0, _ := ret[0].(*cloudscale.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServerServiceMockRecorder) Create(ctx, createRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServerService)(nil).Create), ctx, createRequest)
}

// Delete mocks base method.
func (m *MockServerService) Delete(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServerServiceMockRecorder) Delete(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServerService)(nil).Delete), ctx, serverID)
}

// Get mocks base method.
func (m *MockServerService) Get(ctx context.Context, serverID string) (*cloudscale.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, serverID)
	ret0, _ := ret[0].(*cloudscale.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerServiceMockRecorder) Get(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerService)(nil).Get), ctx, serverID)
}

// List mocks base method.
func (m *MockServerService) List(ctx context.Context, modifiers ...cloudscale.ListRequestModifier) ([]cloudscale.Server, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range modifiers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]cloudscale.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServerServiceMockRecorder) List(ctx any, modifiers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, modifiers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServerService)(nil).List), varargs...)
}

// Reboot mocks base method.
func (m *MockServerService) Reboot(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reboot indicates an expected call of Reboot.
func (mr *MockServerServiceMockRecorder) Reboot(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockServerService)(nil).Reboot), ctx, serverID)
}

// Start mocks base method.
func (m *MockServerService) Start(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerServiceMockRecorder) Start(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServerService)(nil).Start), ctx, serverID)
}

// Stop mocks base method.
func (m *MockServerService) Stop(ctx context.Context, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServerServiceMockRecorder) Stop(ctx, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServerService)(nil).Stop), ctx, serverID)
}

// Update mocks base method.
func (m *MockServerService) Update(ctx context.Context, serverID string, updateRequest *cloudscale.ServerUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, serverID, updateRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServerServiceMockRecorder) Update(ctx, serverID, updateRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServerService)(nil).Update), ctx, serverID, updateRequest)
}
